/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2022-05-19 18:43:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.member.vo.MemberVO;
import com.member.service.MemberViewService;

public final class view_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.member.vo.MemberVO");
    _jspx_imports_classes.add("com.member.service.MemberViewService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// 데이터 수집 - 아이디
String id = request.getParameter("id");
// Conttoller(JSP) - MemberViewService - MemberDAO
// MemberViewService 클래스 작성 -> 생성 후 호출
// MemberDAO 클래스에 view(long no) 추가 작성
MemberViewService service = new MemberViewService();
MemberVO vo = service.service(id);
// System.out.println("view.jsp - vo : " + vo);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원 정보 보기</title>\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery 라이브러리 등록 - JS를 쉽게 처리하기 위한 함수가 들어 있다. jQuery() == $() -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("th,td{\r\n");
      out.write("\tborder: 1px solid #888;\r\n");
      out.write("\t/* padding - 안에 여백 : 데이터 한개 - 사방을 적용, 데이터 2개 - 위아래, 좌우, 데이터 4개 - 위 우 아래 좌 */\r\n");
      out.write("\tpadding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* id가 deleteDiv 안에 label 태그를 선택해서 CSS를 적용시켜라 */\r\n");
      out.write("#deleteDiv label{\r\n");
      out.write("\tmargin: 0 5px 0 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#deleteDiv{\r\n");
      out.write("\tborder: 1px solid #888;\r\n");
      out.write("\tmargin: 10px 0;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("\twidth: 700px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#id, #pw, #tel{\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#changePhotoDiv{\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("// body(문서-document)가 다 로딩이 되면 동작이 되도록 선언한 형태\r\n");
      out.write("$(function(){\r\n");
      out.write("\t// deleteDiv id를 찾아서 숨긴다.(hide)\r\n");
      out.write("\t// deleteDiv가 보였다가 숨겨진다. -> 원래부터 안 보이기 CSS의 visiability 속성을 이용한다.\r\n");
      out.write("\t$(\"#deleteDiv\").hide();\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>회원 정보 보기</h2>\r\n");
      out.write("<table>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>아이디</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getId() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>이름</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getName() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>성별</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getGender() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>생년월일</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getBirth() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>연락처</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getTel() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>이메일</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getEmail() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>사진</th>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<img src=\"");
      out.print( vo.getPhoto() );
      out.write("\">\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<button onclick=\"$('#changePhotoDiv').show()\">바꾸기</button>\r\n");
      out.write("\t\t<div id=\"changePhotoDiv\">\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t<form action=\"changePhoto.jsp\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"id\" value=\"");
      out.print( vo.getId() );
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"oldPhoto\" value=\"");
      out.print( vo.getPhoto() );
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"file\" name=\"photo\" required=\"required\">\r\n");
      out.write("\t\t\t\t<button>바꾸기</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"$('#changePhotoDiv').hide()\">취소</button>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>회원등록일</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getRegDate() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>최근접속일</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getConDate() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>회원상태</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getStatus() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>등급</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getGradeName() );
      out.write('(');
      out.print( vo.getGradeNo() );
      out.write(")</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<a href=\"updateForm.jsp?id=");
      out.print( vo.getId());
      out.write("\"><button>수정</button></a>\r\n");
      out.write("<button onclick=\"$('#deleteDiv').show();\">삭제</button>\r\n");
      out.write("<a href=\"list.jsp\"><button>리스트</button></a>\r\n");
      out.write("<div id=\"deleteDiv\">\r\n");
      out.write("\t<h3>삭제에 필요한 정보 입력</h3>\r\n");
      out.write("\t<form action=\"delete.jsp\" method=\"post\">\r\n");
      out.write("\t\t<label for=\"id\">아이디</label><input name = \"id\" id=\"id\">\r\n");
      out.write("\t\t<label for=\"pw\">비밀번호</label><input name = \"pw\" id=\"pw\">\r\n");
      out.write("\t\t<label for=\"tel\">전화번호</label><input name = \"tel\" id=\"tel\">\r\n");
      out.write("\t\t<button>삭제</button>\r\n");
      out.write("\t\t<button type=\"button\" onclick=\"$('#deleteDiv').hide();\">취소</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
