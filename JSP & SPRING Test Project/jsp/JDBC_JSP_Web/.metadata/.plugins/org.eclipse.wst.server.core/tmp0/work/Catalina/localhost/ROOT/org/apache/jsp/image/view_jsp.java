/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2022-05-19 18:52:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.image;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.image.vo.ImageVO;
import com.image.service.ImageViewService;

public final class view_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.image.service.ImageViewService");
    _jspx_imports_classes.add("com.image.vo.ImageVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// 데이터 수집 - no가 반드시 넘어와야한다. -> list.jsp부터 실행해 주세요. 제발~~~~~~
String strNo = request.getParameter("no");
long no = Long.parseLong(strNo);

// Controller(JSP) - service - dao
ImageViewService service = new ImageViewService();
ImageVO vo = service.service(no);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>이미지 보기</title>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#viewImg{\r\n");
      out.write("\twidth: 400px;\r\n");
      out.write("\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#changeImageDiv{\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("<h2>이미지 보기</h2>\r\n");
      out.write("<table class=\"table\">\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>번호</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getNo() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>제목</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getTitle() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>이미지</th>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<img alt=\"");
      out.print( vo.getTitle() );
      out.write("\" src=\"");
      out.print( vo.getFileName() );
      out.write("\" id=\"viewImg\"\r\n");
      out.write("\t\t class=\"img-rounded\" >\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<a href=\"");
      out.print( vo.getFileName() );
      out.write("\" download  class=\"btn btn-default\">다운로드</a>\r\n");
      out.write("\t\t<button onclick=\"$('#changeImageDiv').show()\" class=\"btn btn-default\">바꾸기</button>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<div id=\"changeImageDiv\">\r\n");
      out.write("\t\t<form action=\"changeImage.jsp\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t<!-- type=\"hidden\" : 사용자는 볼수 없고 데이터는 넘어간다. -->\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"no\" value=\"");
      out.print( vo.getNo() );
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"oldImage\" value=\"");
      out.print( vo.getFileName() );
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"file\" name=\"image\" required=\"required\">\r\n");
      out.write("\t\t\t<button class=\"btn btn-default\">바꾸기</button>\r\n");
      out.write("\t\t\t<button type=\"button\" onclick=\"$('#changeImageDiv').hide()\" class=\"btn btn-default\">취소</button>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>내용</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getContent() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>이름(아이디)</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getName() );
      out.write('(');
      out.print( vo.getId() );
      out.write(")</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th>등록일</th>\r\n");
      out.write("\t<td>");
      out.print( vo.getWriteDate() );
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"2\">\r\n");
      out.write("\t\t<a href=\"updateForm.jsp?no=");
      out.print( vo.getNo() );
      out.write("\" class=\"btn btn-default\">정보수정</a>\r\n");
      out.write("\t\t<a href=\"delete.jsp?no=");
      out.print( vo.getNo() );
      out.write("&oldImage=");
      out.print( vo.getFileName() );
      out.write("\" \r\n");
      out.write("\t\t class=\"btn btn-default\">삭제</a>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
