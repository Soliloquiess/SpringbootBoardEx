/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2022-05-18 09:03:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.member.vo.MemberVO;
import com.member.service.MemberViewService;

public final class updateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.member.vo.MemberVO");
    _jspx_imports_classes.add("com.member.service.MemberViewService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// 자바 부분입니다.
// 데이터 수집 - 아이디 --> 내정보 보기 : view.jsp 참조
String id = request.getParameter("id");
System.out.println("updateForm.jsp - id : " + id);

//DB 글번호에 맞는 데이터 가져오기 - MemberViewService 생성 - 호출
MemberViewService service = new MemberViewService();
MemberVO vo = service.service(id);
System.out.println("updateForm.jsp - vo : " + vo);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원 정보 수정</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>회원 정보 수정</h2>\r\n");
      out.write("<!-- 사용자에게 데이터를 입력하도록 한다. : form, input, select, textarea tag -->\r\n");
      out.write("<!-- action : 데이터를 받을 URL, method : get - URL 뒤에 데이터, post - 따로 보이지 않게 데이터 \r\n");
      out.write("\t\t\t\t- 수정항목 : 이름, 성별, 생년월일, 전화번호, 이메일. 본인확인 입력 정보 : 아이디(변경불가), 비밀번호(입력) \r\n");
      out.write("\t\t\t\t- 회원 등록과 화면이 비슷함. -->\r\n");
      out.write("<form action=\"update.jsp\" method=\"post\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>아이디</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 -->\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"id\" maxlength=\"20\" value=\"");
      out.print( vo.getId() );
      out.write("\" \r\n");
      out.write("\t\t\t\treadonly=\"readonly\" onclick=\"alert('아이디는 수정할 수 없습니다.');\"/></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>비밀번호(본인 확인용)</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력\r\n");
      out.write("\t\t\t\ttype=\"password\" : 입력한 문자를 대체 문자로 보여준다. 동구라미-->\r\n");
      out.write("\t\t\t<td><input type=\"password\" name=\"pw\" maxlength=\"20\" /></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 -->\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"name\" maxlength=\"10\" value=\"");
      out.print( vo.getName() );
      out.write("\" /></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>성별</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 \r\n");
      out.write("\t\t\t\ttype=\"radio\" : name이 같은 것은 것끼리 세트로 움직임 한개가 선택되면 나머지는 해제된다. \r\n");
      out.write("\t\t\t\t넘어 가는 값은 value 속성, 맨처음 선택되어져야 하는 곳에 checked 속성을 넣는다. -->\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<label>\r\n");
      out.write("\t\t\t\t<input type=\"radio\" name=\"gender\" value=\"남자\" \r\n");
      out.write("\t\t\t\t\t");
      out.print( (vo.getGender().equals("남자"))?"checked": "" );
      out.write(" /> 남자\r\n");
      out.write("\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t<label>\r\n");
      out.write("\t\t\t\t<input type=\"radio\" name=\"gender\" value=\"여자\"\r\n");
      out.write("\t\t\t\t\t");
      out.print( (vo.getGender().equals("여자"))?"checked": "" );
      out.write(" /> 여자\r\n");
      out.write("\t\t\t\t</label>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>생년월일</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 \r\n");
      out.write("\t\t\t\txxxx-xx-xx placeholder :입력 형식 예를 데이터가 입력이 안 되었을 때 백그라운드로 표시 -->\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"birth\" maxlength=\"10\" placeholder=\"예)1900-01-01\" \r\n");
      out.write("\t\t\t value=\"");
      out.print( vo.getBirth() );
      out.write("\"/></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>연락처</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 -->\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"tel\" maxlength=\"13\" placeholder=\"예)010-1111-2222\"\r\n");
      out.write("\t\t\t value=\"");
      out.print( vo.getTel() );
      out.write("\" /></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>이메일</th>\r\n");
      out.write("\t\t\t<!-- input 데이터 입력, type : 입력형태, name : 전달 이름, maxlength : 최대 입력 -->\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"email\" maxlength=\"50\" placeholder=\"예)test@naver.com\" \r\n");
      out.write("\t\t\t\tvalue=\"");
      out.print( vo.getEmail() );
      out.write("\"/></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t<!-- button이 form tag 안에 있으면 데이터를 전달하는 동작을 하게 된다. -->\r\n");
      out.write("\t\t\t\t<button type=\"submit\">수정</button>\r\n");
      out.write("\t\t\t\t<button type=\"reset\">다시 입력</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" onclick=\"history.back()\">취소</button>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
