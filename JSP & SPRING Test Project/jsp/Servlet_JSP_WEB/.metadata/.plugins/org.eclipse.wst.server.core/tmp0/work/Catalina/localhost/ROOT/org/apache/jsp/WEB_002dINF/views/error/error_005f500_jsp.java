/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2022-08-10 18:02:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.error;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class error_005f500_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- isErrorPage=\"true\" - 아래 HTML이 catch 부분으로 처리가 된다. -->\r\n");
      out.write("<!-- isErrorPage=\"false\" - 아래 HTML이 try 부분으로 처리가 된다. 기본 값 -->\r\n");
      out.write("\r\n");

// JAVA 입니다.
// 내마음 대로 예외 처리를 하고 싶다면 사용자 예외를 작성해라. 예외코드, 예외 메시지
// 그렇지 않으면 나름대로의 데이터 포맷을 만들어서 넣어라. 
// - 메시지 - Exception:에러코드::메시지
System.out.println("error_500.jsp - msg : " + exception.getMessage());
String [] msgs = exception.getMessage().split("::");
String msg = "오류가 발생 했습니다.";
String[] codes;
String code = "500";
String eClass = "java.lang.Exception";
if(msgs.length >= 2){
	msg = msgs[1];
	codes = msgs[0].split(":");
	if(codes.length >= 2){
		code = codes[1];
		eClass = codes[0];
	} else {
		code = codes[0];
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>서버 내부 처리 오류</title>\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("  <!-- Icon : Awesome 5 Icons 라이브러리 등록 -->\r\n");
      out.write("  <script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<div class=\"panel panel-default\" style=\"margin-top : 80px;\">\r\n");
      out.write("      <div class=\"panel-heading\" style=\"background: #732626; color: white;\">\r\n");
      out.write("      \t<h2>\r\n");
      out.write("\t\t\t<i class='fas fa-exclamation-circle' \r\n");
      out.write("\t\t\t style='font-size:36px;color:white;margin: 0 15px 0 15px;'></i>\r\n");
      out.write("      \t\t서버 내부 처리 오류\r\n");
      out.write("      \t</h2>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"panel-body\">\r\n");
      out.write("\t      <ul class=\"list-group\">\r\n");
      out.write("\t\t\t  <li class=\"list-group-item\">\r\n");
      out.write("\t\t\t  \t에러코드 : ");
      out.print( code );
      out.write(" - JRE 처리 오류\r\n");
      out.write("\t\t\t  </li>\r\n");
      out.write("\t\t\t  <li class=\"list-group-item\">메시지 : ");
      out.print( msg );
      out.write("</li>\r\n");
      out.write("\t\t\t  <li class=\"list-group-item\">예외클래스 : ");
      out.print( eClass );
      out.write("</li>\r\n");
      out.write("\t\t\t  <li class=\"list-group-item\">\r\n");
      out.write("\t\t\t  \t조치 : 다시 한번 시도해 보세요.<br>\r\n");
      out.write("\t\t\t  \t계속 오류가 나면 전산 담당자에게 연락해 주세요.\r\n");
      out.write("\t\t\t  </li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t  </div>\r\n");
      out.write("      <div class=\"panel-footer\" style=\"padding: 10px;\">\r\n");
      out.write("      \t<a href=\"/\" class=\"btn btn-success\">main으로</a>\r\n");
      out.write("      </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
