package com.webjjang.message.controller;

import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.webjjang.message.vo.MessageVO;
import com.webjjang.main.controller.Controller;
import com.webjjang.main.controller.ExecuteService;
import com.webjjang.main.controller.Service;
import com.webjjang.member.vo.LoginVO;
import com.webjjang.util.PageObject;
import com.webjjang.util.bean.Beans;

// Controller를 상속 받지 않습니다. 이유는 execute(request, response) 형태로 되어 있어서 다른 Controller 다르다.
public class AjaxController{

	private final String MODULE = "ajax"; 
	
	// 실행에 필요한 service 객체 선언.
	Service service = null;
	
	private void setService(String url) {
		// Init.init()에서 관련 URL로 찾아본다. : /ajax/msgCount.do -> MessageCountService
		service = Beans.getService(url);
	}

	public String execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		
		// 처리 결과를 담기 위해서  session을 request에서 꺼낸다.
		HttpSession session = request.getSession();
		
		// 바로 데이터를 클라이언트에게 전달하기 위한 객체
		PrintWriter out = response.getWriter();
		
		// list, view, write, delete ??? -> request에서 URL 가져온다.
		String url = request.getServletPath();
		
		// Service에 전달을 해야할 객체
		Object data = null;
		
		// request에 담을 데이터의 key - jsp에서 데이터를 찾아가는 key
		String key = "";
		
		// 보여줄 JSP나 이동할 페이지의 정보 저장 변수
		String jsp = "";
		
		// 페이지 처리를 위한 객체
		PageObject pageObject = null;
		pageObject = new PageObject();
		
		// 실행전 실행할 서비스 셋팅
		setService(url);
		
		// CRUD에 해당되는 처리문 작성 - 메시지 모든 URL을 정의해 놓는다. 그외에는 404로 처리한다.(500 오류로 잡는다.)
		switch (url) {
		// 새로운 메시지 개수 가져오기
		case "/" + MODULE + "/msgCount.do":
			
			// 데이터 수집 - 아이디, mode = 4 : 새로운 메시지
			pageObject.setAcceptMode(4);
			pageObject.setAccepter(LoginVO.getId(request));
			
			// 클라이언트 쪽으로 바로 데이터가 넘어간다.- 전체 새로운 메시지 데이터를 숫자로 전달한다.
			out.print(ExecuteService.execute(service, pageObject));
			
			return "success";

		default:
			System.out.println("404:: 존재하지 않는 페이지를 요청하셨습니다.");
			throw new Exception("404:: 존재하지 않는 페이지를 요청하셨습니다.");
		}
		
	}

}
