package com.webjjang.qna.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.webjjang.qna.vo.QnaVO;
import com.webjjang.util.PageObject;
import com.webjjang.util.db.DB;

public class QnaDAO {

	// 필요한 객체 선언 - 전역 변수
	// 연결 객체
	Connection con = null;
	// 실행 객체
	PreparedStatement pstmt = null;
	// 결과 저장 객체
	ResultSet rs = null;
	
	// 1. 질문 답변 리스트 데이터 가져오는 메서드 선언
	public List<QnaVO> list(PageObject pageObject) throws Exception{
		// 실행 위치와 전달 데이터 확인
		System.out.println("QnaDAO.list().pageObject : " + pageObject);
		// 리턴 데이터 변수 선언
		List<QnaVO> list = null;
		
		// 데이터 채우기 - DB에서 가져오므로 예외처리 필수
		try { // 정상 처리
			// 1. 드라이버 확인 --> DB.java에서 static 초기화 블록으로 해결
			// 2. 연결 가져온다.
			con = DB.getConnection();
			// 3. 실행할 sql 문 작성
			// 3-1. 원본 데이터 가져오기
			String sql = " SELECT q.no, q.title, q.id, m.name, q.writeDate, q.hit, q.refNo, q.ordNo, q.levNo, q.parentNo "
					+ " FROM qna q, member m "
					+ " WHERE m.id = q.id "
					+ " ORDER BY q.refNo desc, q.ordNo ";
			// 3-2. 순서번호를 붙이기
			sql = " SELECT rownum rnum, no, title, id, name, writeDate, hit, "
					+ " refNo, ordNo, levNo, parentNo FROM( " + sql + ")";
			// 3-3. 페이지에 맞는 데이터 가져오기
			sql = " SELECT rnum, no, title, id, name, writeDate, hit, "
				+ " refNo, ordNo, levNo, parentNo FROM( " + sql + ") "
				+ " WHERE rnum between ? AND ? ";
			System.out.println("QnaDAO.list().sql : " + sql);
			
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			// startRow, endRow의 계산은 setTotalRow()를 호출해야만 나온다. 아니면 0 이되서 데이터가 나오지 않는다.
			pstmt.setLong(1, pageObject.getStartRow());
			pstmt.setLong(2, pageObject.getEndRow());
			
			//5. 실행
			rs = pstmt.executeQuery();
			
			// 6. 데이터 담기
			if(rs != null) {
				// 리스트 데이터는 여러개이다. 반복문 사용해야한다.
				// rs.next() -> 다음 포인터로 이동시킨다. 맨처음 포인터는 -1이다. 데이터가 있으면 true가 리턴된다.
				while(rs.next()) {
					// list 가 null 이면 데이터를 담을 수 없으므로 생성해 준다. -> 한번만 될 수 있도록 if문 처리해준다.
					if(list == null) list = new ArrayList<QnaVO>();
					// 데이터 한개를 담기 위한 vo 생성
					QnaVO vo = new QnaVO();
					// setter 를 이용해서 rs에서 가져온 데이터 담기
					vo.setNo(rs.getLong("no"));
					vo.setTitle(rs.getString("title"));
					vo.setId(rs.getString("id"));
					vo.setName(rs.getString("name"));
					vo.setWriteDate(rs.getString("writeDate"));
					vo.setHit(rs.getLong("hit"));
					vo.setRefNo(rs.getLong("refNo"));
					vo.setOrdNo(rs.getInt("ordNo"));
					vo.setLevNo(rs.getInt("levNo"));
					vo.setParentNo(rs.getLong("parentNo"));
					
					// list 객체에 데이터가 담긴 vo 객체를 넣는다
					list.add(vo);
				} // while문의 끝
			} // if 문의 끝
			
		} catch (Exception e) { // 예외처리
			// TODO: handle exception
			// 개발자를 위해서 오류 경로 추척 출력
			e.printStackTrace();
		} finally { // 반드시 처리 - 닫기
			try {
				// 7. 사용한 객체 닫기
				DB.close(con, pstmt, rs);
			} catch (Exception e) {
				// TODO: handle exception
				// 개발자를 위해서 오류 경로 추척 출력
				e.printStackTrace();
			}
		}
		
		// 수집한 데이터를 넘긴다.
		return list;
	}
	
	// 1-1. 페이지 처리를 위한 전체 데이터 가져오는 메서드 선언
	public long getTotalRow(PageObject pageObject) throws Exception{
		// 실행 위치와 전달 데이터 확인
		System.out.println("QnaDAO.getTotalRow().pageObject : " + pageObject);
		// 리턴 데이터 변수 선언
		long totalRow = 0;
		
		// 데이터 채우기 - DB에서 가져오므로 예외처리 필수
		try { // 정상 처리
			// 1. 드라이버 확인 --> DB.java에서 static 초기화 블록으로 해결
			// 2. 연결 가져온다.
			con = DB.getConnection();
			// 3. 실행할 sql 문 작성
			// 3-1. 원본 데이터 가져오기
			String sql = " SELECT count(*) from qna ";
			
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			
			//5. 실행
			rs = pstmt.executeQuery();
			
			// 6. 데이터 담기
			//   데이터가 한개만 나온다. if문으로 다 처리하도록 한다.
			// rs.next() -> 다음 포인터로 이동시킨다. 맨처음 포인터는 -1이다. 데이터가 있으면 true가 리턴된다.
			if(rs != null && rs.next()) {
				totalRow = rs.getLong(1);
			} // if 문의 끝
			
		} catch (Exception e) { // 예외처리
			// TODO: handle exception
			// 개발자를 위해서 오류 경로 추척 출력
			e.printStackTrace();
		} finally { // 반드시 처리 - 닫기
			try {
				// 7. 사용한 객체 닫기
				DB.close(con, pstmt, rs);
			} catch (Exception e) {
				// TODO: handle exception
				// 개발자를 위해서 오류 경로 추척 출력
				e.printStackTrace();
			}
		}
		
		// 수집한 데이터를 넘긴다.
		return totalRow;
	}

	public int write(QnaVO vo) throws Exception{
		// TODO Auto-generated method stub
		
		// 실행 위치와 전달 데이터 확인
		System.out.println("QnaDAO.write().vo: " + vo);
		// 리턴 데이터 변수 선언
		int result = 0;
		
		// 데이터 채우기 - DB에서 가져오므로 예외처리 필수
		try { // 정상 처리
			// 1. 드라이버 확인 --> DB.java에서 static 초기화 블록으로 해결
			// 2. 연결 가져온다.
			con = DB.getConnection();
			// 3. 실행할 sql 문 작성
			String sql = " INSERT INTO qna(no, title, content, id, refNo, ordNo, levNo) "
					+ " VALUES (qna_seq.nextval, ?, ?, ?, qna_seq.nextval, 1, 0) ";
			
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setString(3, vo.getId());
			
			//5. 실행
			result = pstmt.executeUpdate();
			
			// 6. 데이터 표시
			System.out.println("QnaDAO.write() - 질문이 등록되었습니다.");
			
		} catch (Exception e) { // 예외처리
			// TODO: handle exception
			// 개발자를 위해서 오류 경로 추척 출력
			e.printStackTrace();
		} finally { // 반드시 처리 - 닫기
			try {
				// 7. 사용한 객체 닫기
				DB.close(con, pstmt);
			} catch (Exception e) {
				// TODO: handle exception
				// 개발자를 위해서 오류 경로 추척 출력
				e.printStackTrace();
			}
		}
		
		// 결과 데이터를 넘긴다.
		return result;
	}
	
}
